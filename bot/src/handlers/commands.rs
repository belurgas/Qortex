use std::{sync::Arc, time::Duration};
use db_pg::User;
use logging::{log_error, log_info};
use teloxide::{payloads::{SendMessageSetters, SendPhotoSetters}, prelude::Requester, types::{InputFile, Message, ParseMode}, utils::{command::BotCommands, markdown::escape}};
use tokio::time::sleep;
use uuid::Uuid;

use crate::{keyboards::{faqkb::faq, menu::menu}, state::State, types::{HandlerResult, MyDialogue}, TelegramBot};

/// Commands for bot
#[derive(BotCommands, Clone)]
#[command(rename_rule = "snake_case", description = "These commands are supported:")]
pub enum Commander {
    #[command(description = "/faq - –≤–∞–º –ø–æ–º–æ–∂–µ—Ç")]
    Help,
    #[command(description = "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")]
    Start,
    #[command(description = "–û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",)]
    Send(String),
    #[command(description = "FAQ ‚ÑπÔ∏è –±–æ—Ç–∞",)]
    Faq,
}

pub async fn command_handler(bots: Arc<TelegramBot>, dialogue: MyDialogue, msg: Message, cmd: Commander) -> HandlerResult {
    let bot = &bots.bot;
    if msg.chat.id.0 as u64 != msg.from.clone().unwrap().id.0 {
        log_info!("ChatId not eq UserId");
        return Ok(());
    }
    match cmd {
        Commander::Help => bot.send_message(msg.chat.id, Commander::descriptions().to_string()).await?,
        Commander::Start => {
            let new_user = User {
                telegram_id: msg.chat.id.0,
                username: msg.from.unwrap().username,
                uuid: Uuid::new_v4(),
                role: db_pg::UserRole::Default,
            };

            let pool = bots.db.pool.clone();
            tokio::spawn(async move {
                let user = new_user;
                sleep(Duration::from_secs(5)).await;
                let res: Result<_, sqlx::Error> = 
                sqlx::query(
                    r#"
                    INSERT INTO users (telegram_id, username, uuid, role)
                    VALUES ($1, $2, $3, $4)
                    ON CONFLICT (telegram_id) DO NOTHING
                    "#
                )
                .bind(user.telegram_id)
                .bind(&user.username.clone().unwrap_or("None".to_string()))
                .bind(user.uuid)
                .bind(user.role)
                .execute(&pool)
                .await;
                if let Err(e) = res {
                    log_error!("Error while insert user into db: {:?}", e);
                } else {
                    log_info!("It's ok!");
                }
                
            });

            let path = concat!(env!("CARGO_MANIFEST_DIR"), "/static/aw_logo.png");
            let image = InputFile::file(path);
            let text = format!(
                "*{}* –ø—Ä–∏–≤–µ—Ç\n–ú—ã –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ *Axiowel*, –∑–∞–Ω–∏–º–∞–µ–º—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–µ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–æ–Ω–æ–≥–æ –Ω–∞ –ò–ò –º–æ–¥–µ–ª–∏ *Axiowel AI*\n\n–ù–∞—à –±–æ—Ç –¥–æ—Å—Ç–∞—Ç–∞—Ç–æ—á–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω, –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —É–∑–Ω–∞—Ç—å –≤ /faq",
                escape(&msg.chat.first_name().unwrap_or(""))
            );
            bot.send_message(msg.chat.id, text)
                .parse_mode(ParseMode::MarkdownV2)
                .reply_markup(menu())
                .await;

            return Ok(());
        }
        Commander::Send(message) => {
            let message_uuid = bots.db.add_message(msg.chat.id.0, &message).await?;
            bot.send_message(msg.chat.id, format!("–°–æ–æ–±—â–µ–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º: `{}` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–≤–π—Ç–µ –æ—Ç–≤–µ—Ç–∞\\!", escape(message_uuid.to_string().as_str())))
                .parse_mode(ParseMode::MarkdownV2)
                .await?;

            return Ok(());
        },
        Commander::Faq => {
            let mut first_name = escape(&msg.chat.first_name().unwrap_or(""));
            if first_name != "" {
                first_name.push(' ');
            }
            let text = format!(
                "*FAQ ‚ÑπÔ∏è*\n\n*{}*–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, —Ç–æ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä—è–º–æ —Å—é–¥–∞ –≤ —á–∞—Ç üí≠ –∏ *Axiobot* ü§ñ –ø–æ–º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å üòä",
                first_name
            );
            
            bot.send_message(msg.chat.id, text)
                .reply_markup(faq())
                .parse_mode(ParseMode::MarkdownV2)
                .await?;
                
            dialogue.update(State::WaitQuestion).await?;

            return Ok(())
        }
    };

    Ok(())
}