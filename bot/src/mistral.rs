// src/mistral.rs

use reqwest::Client;
use serde::{Deserialize, Serialize};
use std::env;

#[derive(Serialize)]
pub struct QueryMessage {
    pub role: String,
    pub content: String,
}

#[derive(Serialize)]
pub struct MistralRequest {
    pub temperature: f32,
    pub model: String,
    pub messages: Vec<QueryMessage>,
}

#[derive(Deserialize)]
struct Choice {
    message: MistralResponse,
}

#[derive(Deserialize)]
pub struct MistralResponse {
    pub content: String,
}

#[derive(Deserialize)]
struct ApiResponse {
    pub choices: Vec<Choice>,
}

pub async fn query_mistral_api(input_text: &str) -> Result<String, Box<dyn std::error::Error + Send + Sync>> {
    let api_key = env::var("MISTRAL_API_KEY")?;

    let client = Client::new();

    let system_prompt = r#"
–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ plain-—Ç–µ–∫—Å—Ç–µ. –°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:
1. **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**:
   - –ù–∏–∫–∞–∫–∏—Ö Markdown, HTML, LaTeX.
   - –ù–∏–∫–∞–∫–∏—Ö ```code blocks```, `inline_code`, > —Ü–∏—Ç–∞—Ç.
   - –ù–∏–∫–∞–∫–∏—Ö *–∫—É—Ä—Å–∏–≤–∞*, **–∂–∏—Ä–Ω–æ–≥–æ**, ~–∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è~.
   - –ù–∏–∫–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü, —Å–ø–∏—Å–∫–æ–≤ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (1., - [x] –∏ —Ç.–¥.).
2. **–†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ**:
   - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤.
   - –≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚úÖ, üî•, ‚ùó) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞.
3. **–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–µ–∫—Å—Ç**:
   - –í–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å plain-—Ç–µ–∫—Å—Ç–æ–º".
4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –æ–±—Ö—è—Å–Ω–∏—Ç—å –∫–∞–∫ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —è–∑—ã–∫–µ, —Ç–æ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏.
5. **–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞**:
   "–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ ‚òÄÔ∏è  
   
   –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É –≤ –ø–∞—Ä–∫.  
   –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–¥—É üíß""#;

    let body = MistralRequest {
        model: "pixtral-large-latest".to_string(),
        temperature: 0.3,
        messages: vec![
            QueryMessage {
                role: "system".to_string(),
                content: system_prompt.to_string(),
            },
            QueryMessage {
                role: "user".to_string(),
                content: input_text.to_string(),
            },
        ],
    };

    let response = client
        .post("https://api.mistral.ai/v1/chat/completions") 
        .header("Content-Type", "application/json")
        .header("Accept", "application/json")
        .bearer_auth(api_key)
        .json(&body)
        .send()
        .await?;

    let result: ApiResponse = response.json().await?;

    if let Some(choice) = result.choices.get(0) {
        Ok(choice.message.content.clone())
    } else {
        Err("No choices in the response".into())
    }
}