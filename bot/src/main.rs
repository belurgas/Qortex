use db::DatabaseService;
use grpc_service::{client::spawn_client_request_with_callback};
use logging::{log_info, logger::setup_logger};
// use monitor::{print_all, say_hello};
use dotenvy::dotenv;
use teloxide::{adaptors::{throttle::Limits, Throttle}, dispatching::dialogue::InMemStorage, prelude::*, utils::{command::BotCommands}};
use tokio::{sync::oneshot, time::Instant};
// use tonic::transport::{Certificate, Identity, Server, ServerTlsConfig};
use std::{env, sync::Arc};


#[derive(Clone, Default, Debug)]
pub enum State {
    #[default]
    OnWaiting,
    Send,
}

/// Commands for bot
#[derive(BotCommands, Clone)]
#[command(rename_rule = "snake_case", description = "These commands are supported:")]
enum Command {
    #[command(description = "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ—Ç —Ç–µ–∫—Å")]
    Help,
    #[command(description = "–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞")]
    Start,
    #[command(description = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É",)]
    SendMessage(String),
}

/// MyDialogue type need for using FSM Context managment
type MyDialogue = Dialogue<State, InMemStorage<State>>;

/// Simple Result<> type for functions
type HandlerResult = Result<(), Box<dyn std::error::Error + Send + Sync>>;

/// Using Trottle describer for rate limit setting
type MyBot = Throttle<Bot>;

/// Answering for commands requests
async fn answer(bot: MyBot, msg: Message, cmd: Command, fsm: MyDialogue) -> HandlerResult {
    match cmd {
        Command::Help => bot.send_message(msg.chat.id, Command::descriptions().to_string()).await?,
        Command::Start => {
            log_info!("–°–æ—Å—Ç–æ—è–Ω–∏–µ: {:?}", fsm.get().await.unwrap());
            bot.send_message(msg.chat.id, format!("–ó–∞–ø—É—Å—Ç–∏–ª–∏")).await?
        }
        Command::SendMessage(message) => {
            bot.send_message(msg.chat.id, format!("–°–æ–æ–±—â–µ–Ω–∏–µ: {} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", message))
                .await?
        }
    };

    Ok(())
}

async fn send(bot: MyBot, _dialogue: MyDialogue, msg: Message) -> HandlerResult {
    bot.send_message(msg.chat.id, "Let's start! Send piska?").await?;
    // dialogue.update(State::ReceiveFullName).await?;
    Ok(())
}

async fn handle_ai_message(bot: MyBot, msg: Message) -> HandlerResult {
    if let Some(text) = msg.text() {
        bot.send_message(msg.chat.id, "–î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...").await?;
        
        // let telegram_id = msg.chat.id.0;
        // let username = msg.from.clone().unwrap().username;

//         let system_prompt = r#"
// –¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ plain-—Ç–µ–∫—Å—Ç–µ. –°–æ–±–ª—é–¥–∞–π –ø—Ä–∞–≤–∏–ª–∞:
// 1. **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ª—é–±–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**:
//    - –ù–∏–∫–∞–∫–∏—Ö Markdown, HTML, LaTeX.
//    - –ù–∏–∫–∞–∫–∏—Ö ```code blocks```, `inline_code`, > —Ü–∏—Ç–∞—Ç.
//    - –ù–∏–∫–∞–∫–∏—Ö *–∫—É—Ä—Å–∏–≤–∞*, **–∂–∏—Ä–Ω–æ–≥–æ**, ~–∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è~.
//    - –ù–∏–∫–∞–∫–∏—Ö —Ç–∞–±–ª–∏—Ü, —Å–ø–∏—Å–∫–æ–≤ —Å –ø—É–Ω–∫—Ç–∞–º–∏ (1., - [x] –∏ —Ç.–¥.).
// 2. **–†–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ**:
//    - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤.
//    - –≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚úÖ, üî•, ‚ùó) –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞.
// 3. **–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç–µ–∫—Å—Ç**:
//    - –í–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å plain-—Ç–µ–∫—Å—Ç–æ–º".
// 4. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –æ–±—Ö—è—Å–Ω–∏—Ç—å –∫–∞–∫ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ —è–∑—ã–∫–µ, —Ç–æ –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏.
// 5. **–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞**:
//    "–°–µ–≥–æ–¥–Ω—è —Å–æ–ª–Ω–µ—á–Ω–æ ‚òÄÔ∏è  
   
//    –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–≥—É–ª–∫—É –≤ –ø–∞—Ä–∫.  
//    –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–¥—É üíß
            
//         "#;

//         db_service.check_or_register_user(telegram_id, username).await?;

//         db_service.add_message_to_history(telegram_id, "system", system_prompt, true).await?;
//         db_service.add_message_to_history(telegram_id, "user", msg.text().unwrap(), false).await?;
        let (tx, rx) = oneshot::channel();
        log_info!("–°—Ç–∞—Ä—Ç –∑–∞–ø—Ä–æ—Å–∞");
        spawn_client_request_with_callback(tx, text.to_string());

        let bot_clone = bot.clone();
        tokio::spawn(async move {
            match rx.await {
                Ok(Ok(text)) => bot_clone.send_message(msg.chat.id, text).await.unwrap(),
                Ok(Err(e)) => bot_clone.send_message(msg.chat.id, e).await.unwrap(),
                Err(_) => bot_clone.send_message(msg.chat.id, "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º").await.unwrap(),
            }
        });
    }

    Ok(())
}

#[tokio::main]
async fn main() {
    // Donenv, logger, load
    dotenv().ok();
    setup_logger().expect("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–≥–µ—Ä");

    let token = env::var("TOKEN").expect("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env");
    
    // –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ... ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
    // tokio::spawn(async move {
    //     let _ = start_grpc().await;
    // });

    let uri = env::var("MONGODB_URI").unwrap();

    // let db_service = Arc::new(DatabaseService::new(&uri, "ai_bot").await.unwrap());


    log_info!("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...");

    // Bot init
    let bot = Bot::new(token).throttle(Limits::default());

    // Dptree handler
    let handler = dptree::entry()
        .branch(
            Update::filter_message()
                .enter_dialogue::<Message, InMemStorage<State>, State>()
                .branch(dptree::case![State::Send].endpoint(send))
        )
        .branch(
            Update::filter_message()
                .filter_command::<Command>()
                .enter_dialogue::<Message, InMemStorage<State>, State>()
                .endpoint(answer)
        )
        .branch(
            Update::filter_message()
                .filter(|msg: Message| msg.text().is_some())
                .endpoint(handle_ai_message)
        );
    
    // Dispatch builder and starter
    Dispatcher::builder(bot, handler)
        .dependencies(dptree::deps![
            InMemStorage::<State>::new()
        ])
        .enable_ctrlc_handler()
        .build()
        .dispatch()
        .await;
}